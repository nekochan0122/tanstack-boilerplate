/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserImport } from './routes/user'
import { Route as AuthImport } from './routes/auth'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as UserVerifyEmailImport } from './routes/user.verify-email'
import { Route as UserChangePasswordImport } from './routes/user.change-password'
import { Route as UserChangeEmailImport } from './routes/user.change-email'
import { Route as UserAccountSettingsImport } from './routes/user.account-settings'
import { Route as AuthSignUpImport } from './routes/auth.sign-up'
import { Route as AuthSignInImport } from './routes/auth.sign-in'
import { Route as AdminUserManagementImport } from './routes/admin.user-management'
import { Route as AdminDashboardImport } from './routes/admin.dashboard'

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserVerifyEmailRoute = UserVerifyEmailImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => UserRoute,
} as any)

const UserChangePasswordRoute = UserChangePasswordImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => UserRoute,
} as any)

const UserChangeEmailRoute = UserChangeEmailImport.update({
  id: '/change-email',
  path: '/change-email',
  getParentRoute: () => UserRoute,
} as any)

const UserAccountSettingsRoute = UserAccountSettingsImport.update({
  id: '/account-settings',
  path: '/account-settings',
  getParentRoute: () => UserRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)

const AdminUserManagementRoute = AdminUserManagementImport.update({
  id: '/user-management',
  path: '/user-management',
  getParentRoute: () => AdminRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof AdminImport
    }
    '/admin/user-management': {
      id: '/admin/user-management'
      path: '/user-management'
      fullPath: '/admin/user-management'
      preLoaderRoute: typeof AdminUserManagementImport
      parentRoute: typeof AdminImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof AuthImport
    }
    '/user/account-settings': {
      id: '/user/account-settings'
      path: '/account-settings'
      fullPath: '/user/account-settings'
      preLoaderRoute: typeof UserAccountSettingsImport
      parentRoute: typeof UserImport
    }
    '/user/change-email': {
      id: '/user/change-email'
      path: '/change-email'
      fullPath: '/user/change-email'
      preLoaderRoute: typeof UserChangeEmailImport
      parentRoute: typeof UserImport
    }
    '/user/change-password': {
      id: '/user/change-password'
      path: '/change-password'
      fullPath: '/user/change-password'
      preLoaderRoute: typeof UserChangePasswordImport
      parentRoute: typeof UserImport
    }
    '/user/verify-email': {
      id: '/user/verify-email'
      path: '/verify-email'
      fullPath: '/user/verify-email'
      preLoaderRoute: typeof UserVerifyEmailImport
      parentRoute: typeof UserImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminUserManagementRoute: typeof AdminUserManagementRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
  AdminUserManagementRoute: AdminUserManagementRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface UserRouteChildren {
  UserAccountSettingsRoute: typeof UserAccountSettingsRoute
  UserChangeEmailRoute: typeof UserChangeEmailRoute
  UserChangePasswordRoute: typeof UserChangePasswordRoute
  UserVerifyEmailRoute: typeof UserVerifyEmailRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserAccountSettingsRoute: UserAccountSettingsRoute,
  UserChangeEmailRoute: UserChangeEmailRoute,
  UserChangePasswordRoute: UserChangePasswordRoute,
  UserVerifyEmailRoute: UserVerifyEmailRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/user-management': typeof AdminUserManagementRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/user/account-settings': typeof UserAccountSettingsRoute
  '/user/change-email': typeof UserChangeEmailRoute
  '/user/change-password': typeof UserChangePasswordRoute
  '/user/verify-email': typeof UserVerifyEmailRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/user-management': typeof AdminUserManagementRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/user/account-settings': typeof UserAccountSettingsRoute
  '/user/change-email': typeof UserChangeEmailRoute
  '/user/change-password': typeof UserChangePasswordRoute
  '/user/verify-email': typeof UserVerifyEmailRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/user-management': typeof AdminUserManagementRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/user/account-settings': typeof UserAccountSettingsRoute
  '/user/change-email': typeof UserChangeEmailRoute
  '/user/change-password': typeof UserChangePasswordRoute
  '/user/verify-email': typeof UserVerifyEmailRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/auth'
    | '/user'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/user/account-settings'
    | '/user/change-email'
    | '/user/change-password'
    | '/user/verify-email'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/auth'
    | '/user'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/user/account-settings'
    | '/user/change-email'
    | '/user/change-password'
    | '/user/verify-email'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/auth'
    | '/user'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/user/account-settings'
    | '/user/change-email'
    | '/user/change-password'
    | '/user/verify-email'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  UserRoute: typeof UserRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  UserRoute: UserRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/auth",
        "/user"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/dashboard",
        "/admin/user-management"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/sign-in",
        "/auth/sign-up"
      ]
    },
    "/user": {
      "filePath": "user.tsx",
      "children": [
        "/user/account-settings",
        "/user/change-email",
        "/user/change-password",
        "/user/verify-email"
      ]
    },
    "/admin/dashboard": {
      "filePath": "admin.dashboard.tsx",
      "parent": "/admin"
    },
    "/admin/user-management": {
      "filePath": "admin.user-management.tsx",
      "parent": "/admin"
    },
    "/auth/sign-in": {
      "filePath": "auth.sign-in.tsx",
      "parent": "/auth"
    },
    "/auth/sign-up": {
      "filePath": "auth.sign-up.tsx",
      "parent": "/auth"
    },
    "/user/account-settings": {
      "filePath": "user.account-settings.tsx",
      "parent": "/user"
    },
    "/user/change-email": {
      "filePath": "user.change-email.tsx",
      "parent": "/user"
    },
    "/user/change-password": {
      "filePath": "user.change-password.tsx",
      "parent": "/user"
    },
    "/user/verify-email": {
      "filePath": "user.verify-email.tsx",
      "parent": "/user"
    }
  }
}
ROUTE_MANIFEST_END */
